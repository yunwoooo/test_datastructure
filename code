import pandas as pd
import numpy as np
import heapq

def dijkstra(graph, start, end):
    distance = {node: float('infinity') for node in graph}
    distance[start] = 0

    priority_queue = [(0, start)]
    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)
        if current_distance > distance[current_node]:
            continue
        for neighbor, weight in graph[current_node].items():
            distance_to_neighbor = current_distance + weight
            if distance_to_neighbor < distance[neighbor]:
                distance[neighbor] = distance_to_neighbor
                heapq.heappush(priority_queue, (distance_to_neighbor, neighbor))
    return distance[end]

csv_file = 'projec.csv'
df = pd.read_csv(csv_file, index_col=0, encoding='cp949')
df.replace(10000, float('inf'), inplace=True)
nodes = df.columns.tolist()

# 엘리베이터에서 출발할 때
start_node_elevator = '엘리베이터'
total_distance_elevator = 0
path_elevator = [start_node_elevator]

for end_node in nodes:
    if start_node_elevator != end_node:
        distance = dijkstra(df.to_dict(), start_node_elevator, end_node)
        total_distance_elevator += distance
        path_elevator.append(end_node)
print(f"엘리베이터에서 출발할 때: {path_elevator}")

# 에스컬레이터에서 출발할 때
start_node_escalator = '에스컬레이터'
total_distance_escalator = 0
path_escalator = [start_node_escalator]

for end_node in nodes:
    if start_node_escalator != end_node:
        distance = dijkstra(df.to_dict(), start_node_escalator, end_node)
        total_distance_escalator += distance
        path_escalator.append(end_node)
print(f"에스컬레이터에서 출발할 때: {path_escalator}")
